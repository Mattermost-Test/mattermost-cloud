// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// clusterInstallationLockStore is an autogenerated mock type for the clusterInstallationLockStore type
type clusterInstallationLockStore struct {
	mock.Mock
}

// LockClusterInstallations provides a mock function with given fields: clusterInstallationID, lockerID
func (_m *clusterInstallationLockStore) LockClusterInstallations(clusterInstallationID []string, lockerID string) (bool, error) {
	ret := _m.Called(clusterInstallationID, lockerID)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string) bool); ok {
		r0 = rf(clusterInstallationID, lockerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(clusterInstallationID, lockerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockClusterInstallations provides a mock function with given fields: clusterInstallationID, lockerID, force
func (_m *clusterInstallationLockStore) UnlockClusterInstallations(clusterInstallationID []string, lockerID string, force bool) (bool, error) {
	ret := _m.Called(clusterInstallationID, lockerID, force)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string, bool) bool); ok {
		r0 = rf(clusterInstallationID, lockerID, force)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string, bool) error); ok {
		r1 = rf(clusterInstallationID, lockerID, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
