// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/mattermost/mattermost-cloud/model"
	mock "github.com/stretchr/testify/mock"
)

// clusterProvisioner is an autogenerated mock type for the clusterProvisioner type
type clusterProvisioner struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: cluster
func (_m *clusterProvisioner) CreateCluster(cluster *model.Cluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCluster provides a mock function with given fields: cluster
func (_m *clusterProvisioner) DeleteCluster(cluster *model.Cluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClusterVersion provides a mock function with given fields: cluster
func (_m *clusterProvisioner) GetClusterVersion(cluster *model.Cluster) (string, error) {
	ret := _m.Called(cluster)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.Cluster) string); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Cluster) error); ok {
		r1 = rf(cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrepareCluster provides a mock function with given fields: cluster
func (_m *clusterProvisioner) PrepareCluster(cluster *model.Cluster) (bool, error) {
	ret := _m.Called(cluster)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*model.Cluster) bool); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Cluster) error); ok {
		r1 = rf(cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProvisionCluster provides a mock function with given fields: cluster
func (_m *clusterProvisioner) ProvisionCluster(cluster *model.Cluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpgradeCluster provides a mock function with given fields: cluster
func (_m *clusterProvisioner) UpgradeCluster(cluster *model.Cluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
