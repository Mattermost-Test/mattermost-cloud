// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/mattermost/mattermost-cloud/model"
	mock "github.com/stretchr/testify/mock"
)

// clusterInstallationStore is an autogenerated mock type for the clusterInstallationStore type
type clusterInstallationStore struct {
	mock.Mock
}

// DeleteClusterInstallation provides a mock function with given fields: clusterInstallationID
func (_m *clusterInstallationStore) DeleteClusterInstallation(clusterInstallationID string) error {
	ret := _m.Called(clusterInstallationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clusterInstallationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCluster provides a mock function with given fields: clusterID
func (_m *clusterInstallationStore) GetCluster(clusterID string) (*model.Cluster, error) {
	ret := _m.Called(clusterID)

	var r0 *model.Cluster
	if rf, ok := ret.Get(0).(func(string) *model.Cluster); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterInstallation provides a mock function with given fields: clusterInstallationID
func (_m *clusterInstallationStore) GetClusterInstallation(clusterInstallationID string) (*model.ClusterInstallation, error) {
	ret := _m.Called(clusterInstallationID)

	var r0 *model.ClusterInstallation
	if rf, ok := ret.Get(0).(func(string) *model.ClusterInstallation); ok {
		r0 = rf(clusterInstallationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClusterInstallation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterInstallationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstallation provides a mock function with given fields: installationID
func (_m *clusterInstallationStore) GetInstallation(installationID string) (*model.Installation, error) {
	ret := _m.Called(installationID)

	var r0 *model.Installation
	if rf, ok := ret.Get(0).(func(string) *model.Installation); ok {
		r0 = rf(installationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Installation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(installationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnlockedClusterInstallationsPendingWork provides a mock function with given fields:
func (_m *clusterInstallationStore) GetUnlockedClusterInstallationsPendingWork() ([]*model.ClusterInstallation, error) {
	ret := _m.Called()

	var r0 []*model.ClusterInstallation
	if rf, ok := ret.Get(0).(func() []*model.ClusterInstallation); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ClusterInstallation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhooks provides a mock function with given fields: filter
func (_m *clusterInstallationStore) GetWebhooks(filter *model.WebhookFilter) ([]*model.Webhook, error) {
	ret := _m.Called(filter)

	var r0 []*model.Webhook
	if rf, ok := ret.Get(0).(func(*model.WebhookFilter) []*model.Webhook); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.WebhookFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockClusterInstallations provides a mock function with given fields: clusterInstallationID, lockerID
func (_m *clusterInstallationStore) LockClusterInstallations(clusterInstallationID []string, lockerID string) (bool, error) {
	ret := _m.Called(clusterInstallationID, lockerID)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string) bool); ok {
		r0 = rf(clusterInstallationID, lockerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string) error); ok {
		r1 = rf(clusterInstallationID, lockerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockClusterInstallations provides a mock function with given fields: clusterInstallationID, lockerID, force
func (_m *clusterInstallationStore) UnlockClusterInstallations(clusterInstallationID []string, lockerID string, force bool) (bool, error) {
	ret := _m.Called(clusterInstallationID, lockerID, force)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]string, string, bool) bool); ok {
		r0 = rf(clusterInstallationID, lockerID, force)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, string, bool) error); ok {
		r1 = rf(clusterInstallationID, lockerID, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterInstallation provides a mock function with given fields: clusterInstallation
func (_m *clusterInstallationStore) UpdateClusterInstallation(clusterInstallation *model.ClusterInstallation) error {
	ret := _m.Called(clusterInstallation)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ClusterInstallation) error); ok {
		r0 = rf(clusterInstallation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
