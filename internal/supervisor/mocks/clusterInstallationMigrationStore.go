// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/mattermost/mattermost-cloud/model"
	mock "github.com/stretchr/testify/mock"
)

// clusterInstallationMigrationStore is an autogenerated mock type for the clusterInstallationMigrationStore type
type clusterInstallationMigrationStore struct {
	mock.Mock
}

// CreateClusterInstallationMigration provides a mock function with given fields: migration
func (_m *clusterInstallationMigrationStore) CreateClusterInstallationMigration(migration *model.ClusterInstallationMigration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ClusterInstallationMigration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClusterInstallationMigration provides a mock function with given fields: migrationID
func (_m *clusterInstallationMigrationStore) DeleteClusterInstallationMigration(migrationID string) error {
	ret := _m.Called(migrationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(migrationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClusterInstallationMigration provides a mock function with given fields: migrationID
func (_m *clusterInstallationMigrationStore) GetClusterInstallationMigration(migrationID string) (*model.ClusterInstallationMigration, error) {
	ret := _m.Called(migrationID)

	var r0 *model.ClusterInstallationMigration
	if rf, ok := ret.Get(0).(func(string) *model.ClusterInstallationMigration); ok {
		r0 = rf(migrationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClusterInstallationMigration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(migrationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnlockedClusterInstallationMigrationsPendingWork provides a mock function with given fields:
func (_m *clusterInstallationMigrationStore) GetUnlockedClusterInstallationMigrationsPendingWork() ([]*model.ClusterInstallationMigration, error) {
	ret := _m.Called()

	var r0 []*model.ClusterInstallationMigration
	if rf, ok := ret.Get(0).(func() []*model.ClusterInstallationMigration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ClusterInstallationMigration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockClusterInstallationMigration provides a mock function with given fields: migrationID, lockerID
func (_m *clusterInstallationMigrationStore) LockClusterInstallationMigration(migrationID string, lockerID string) (bool, error) {
	ret := _m.Called(migrationID, lockerID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(migrationID, lockerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(migrationID, lockerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockClusterInstallationMigration provides a mock function with given fields: migrationID, lockerID, force
func (_m *clusterInstallationMigrationStore) UnlockClusterInstallationMigration(migrationID string, lockerID string, force bool) (bool, error) {
	ret := _m.Called(migrationID, lockerID, force)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, bool) bool); ok {
		r0 = rf(migrationID, lockerID, force)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(migrationID, lockerID, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterInstallationMigration provides a mock function with given fields: migration
func (_m *clusterInstallationMigrationStore) UpdateClusterInstallationMigration(migration *model.ClusterInstallationMigration) error {
	ret := _m.Called(migration)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ClusterInstallationMigration) error); ok {
		r0 = rf(migration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
