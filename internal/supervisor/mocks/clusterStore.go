// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	model "github.com/mattermost/mattermost-cloud/model"
	mock "github.com/stretchr/testify/mock"
)

// clusterStore is an autogenerated mock type for the clusterStore type
type clusterStore struct {
	mock.Mock
}

// DeleteCluster provides a mock function with given fields: clusterID
func (_m *clusterStore) DeleteCluster(clusterID string) error {
	ret := _m.Called(clusterID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(clusterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCluster provides a mock function with given fields: clusterID
func (_m *clusterStore) GetCluster(clusterID string) (*model.Cluster, error) {
	ret := _m.Called(clusterID)

	var r0 *model.Cluster
	if rf, ok := ret.Get(0).(func(string) *model.Cluster); ok {
		r0 = rf(clusterID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clusterID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusters provides a mock function with given fields: clusterFilter
func (_m *clusterStore) GetClusters(clusterFilter *model.ClusterFilter) ([]*model.Cluster, error) {
	ret := _m.Called(clusterFilter)

	var r0 []*model.Cluster
	if rf, ok := ret.Get(0).(func(*model.ClusterFilter) []*model.Cluster); ok {
		r0 = rf(clusterFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ClusterFilter) error); ok {
		r1 = rf(clusterFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnlockedClustersPendingWork provides a mock function with given fields:
func (_m *clusterStore) GetUnlockedClustersPendingWork() ([]*model.Cluster, error) {
	ret := _m.Called()

	var r0 []*model.Cluster
	if rf, ok := ret.Get(0).(func() []*model.Cluster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Cluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebhooks provides a mock function with given fields: filter
func (_m *clusterStore) GetWebhooks(filter *model.WebhookFilter) ([]*model.Webhook, error) {
	ret := _m.Called(filter)

	var r0 []*model.Webhook
	if rf, ok := ret.Get(0).(func(*model.WebhookFilter) []*model.Webhook); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Webhook)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.WebhookFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockCluster provides a mock function with given fields: clusterID, lockerID
func (_m *clusterStore) LockCluster(clusterID string, lockerID string) (bool, error) {
	ret := _m.Called(clusterID, lockerID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(clusterID, lockerID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clusterID, lockerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlockCluster provides a mock function with given fields: clusterID, lockerID, force
func (_m *clusterStore) UnlockCluster(clusterID string, lockerID string, force bool) (bool, error) {
	ret := _m.Called(clusterID, lockerID, force)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, bool) bool); ok {
		r0 = rf(clusterID, lockerID, force)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(clusterID, lockerID, force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: cluster
func (_m *clusterStore) UpdateCluster(cluster *model.Cluster) error {
	ret := _m.Called(cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
