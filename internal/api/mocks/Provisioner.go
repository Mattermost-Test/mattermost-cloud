// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	k8s "github.com/mattermost/mattermost-cloud/internal/tools/k8s"
	mock "github.com/stretchr/testify/mock"

	model "github.com/mattermost/mattermost-cloud/model"
)

// Provisioner is an autogenerated mock type for the Provisioner type
type Provisioner struct {
	mock.Mock
}

// ExecMattermostCLI provides a mock function with given fields: cluster, clusterInstallation, args
func (_m *Provisioner) ExecMattermostCLI(cluster *model.Cluster, clusterInstallation *model.ClusterInstallation, args ...string) ([]byte, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cluster, clusterInstallation)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*model.Cluster, *model.ClusterInstallation, ...string) []byte); ok {
		r0 = rf(cluster, clusterInstallation, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Cluster, *model.ClusterInstallation, ...string) error); ok {
		r1 = rf(cluster, clusterInstallation, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterResources provides a mock function with given fields: _a0, _a1
func (_m *Provisioner) GetClusterResources(_a0 *model.Cluster, _a1 bool) (*k8s.ClusterResources, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *k8s.ClusterResources
	if rf, ok := ret.Get(0).(func(*model.Cluster, bool) *k8s.ClusterResources); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*k8s.ClusterResources)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Cluster, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
