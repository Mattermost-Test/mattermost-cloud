// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	acm "github.com/aws/aws-sdk-go/service/acm"

	ec2 "github.com/aws/aws-sdk-go/service/ec2"

	mock "github.com/stretchr/testify/mock"

	route53 "github.com/aws/aws-sdk-go/service/route53"
)

// api is an autogenerated mock type for the api type
type api struct {
	mock.Mock
}

// changeResourceRecordSets provides a mock function with given fields: _a0, _a1
func (_m *api) changeResourceRecordSets(_a0 *route53.Route53, _a1 *route53.ChangeResourceRecordSetsInput) (*route53.ChangeResourceRecordSetsOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *route53.ChangeResourceRecordSetsOutput
	if rf, ok := ret.Get(0).(func(*route53.Route53, *route53.ChangeResourceRecordSetsInput) *route53.ChangeResourceRecordSetsOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeResourceRecordSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*route53.Route53, *route53.ChangeResourceRecordSetsInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// describeImages provides a mock function with given fields: svc, input
func (_m *api) describeImages(svc *ec2.EC2, input *ec2.DescribeImagesInput) (*ec2.DescribeImagesOutput, error) {
	ret := _m.Called(svc, input)

	var r0 *ec2.DescribeImagesOutput
	if rf, ok := ret.Get(0).(func(*ec2.EC2, *ec2.DescribeImagesInput) *ec2.DescribeImagesOutput); ok {
		r0 = rf(svc, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DescribeImagesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EC2, *ec2.DescribeImagesInput) error); ok {
		r1 = rf(svc, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getACMClient provides a mock function with given fields:
func (_m *api) getACMClient() (*acm.ACM, error) {
	ret := _m.Called()

	var r0 *acm.ACM
	if rf, ok := ret.Get(0).(func() *acm.ACM); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ACM)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getEC2Client provides a mock function with given fields:
func (_m *api) getEC2Client() (*ec2.EC2, error) {
	ret := _m.Called()

	var r0 *ec2.EC2
	if rf, ok := ret.Get(0).(func() *ec2.EC2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.EC2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getRoute53Client provides a mock function with given fields:
func (_m *api) getRoute53Client() (*route53.Route53, error) {
	ret := _m.Called()

	var r0 *route53.Route53
	if rf, ok := ret.Get(0).(func() *route53.Route53); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.Route53)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// listCertificates provides a mock function with given fields: _a0, _a1
func (_m *api) listCertificates(_a0 *acm.ACM, _a1 *acm.ListCertificatesInput) (*acm.ListCertificatesOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *acm.ListCertificatesOutput
	if rf, ok := ret.Get(0).(func(*acm.ACM, *acm.ListCertificatesInput) *acm.ListCertificatesOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ListCertificatesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*acm.ACM, *acm.ListCertificatesInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// listHostedZones provides a mock function with given fields: _a0, _a1
func (_m *api) listHostedZones(_a0 *route53.Route53, _a1 *route53.ListHostedZonesInput) (*route53.ListHostedZonesOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *route53.ListHostedZonesOutput
	if rf, ok := ret.Get(0).(func(*route53.Route53, *route53.ListHostedZonesInput) *route53.ListHostedZonesOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*route53.Route53, *route53.ListHostedZonesInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// listResourceRecordSets provides a mock function with given fields: _a0, _a1
func (_m *api) listResourceRecordSets(_a0 *route53.Route53, _a1 *route53.ListResourceRecordSetsInput) (*route53.ListResourceRecordSetsOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *route53.ListResourceRecordSetsOutput
	if rf, ok := ret.Get(0).(func(*route53.Route53, *route53.ListResourceRecordSetsInput) *route53.ListResourceRecordSetsOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListResourceRecordSetsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*route53.Route53, *route53.ListResourceRecordSetsInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// listTagsForCertificate provides a mock function with given fields: _a0, _a1
func (_m *api) listTagsForCertificate(_a0 *acm.ACM, _a1 *acm.ListTagsForCertificateInput) (*acm.ListTagsForCertificateOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *acm.ListTagsForCertificateOutput
	if rf, ok := ret.Get(0).(func(*acm.ACM, *acm.ListTagsForCertificateInput) *acm.ListTagsForCertificateOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ListTagsForCertificateOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*acm.ACM, *acm.ListTagsForCertificateInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// listTagsForResource provides a mock function with given fields: _a0, _a1
func (_m *api) listTagsForResource(_a0 *route53.Route53, _a1 *route53.ListTagsForResourceInput) (*route53.ListTagsForResourceOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *route53.ListTagsForResourceOutput
	if rf, ok := ret.Get(0).(func(*route53.Route53, *route53.ListTagsForResourceInput) *route53.ListTagsForResourceOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*route53.Route53, *route53.ListTagsForResourceInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// tagResource provides a mock function with given fields: _a0, _a1
func (_m *api) tagResource(_a0 *ec2.EC2, _a1 *ec2.CreateTagsInput) (*ec2.CreateTagsOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ec2.CreateTagsOutput
	if rf, ok := ret.Get(0).(func(*ec2.EC2, *ec2.CreateTagsInput) *ec2.CreateTagsOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.CreateTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EC2, *ec2.CreateTagsInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// untagResource provides a mock function with given fields: _a0, _a1
func (_m *api) untagResource(_a0 *ec2.EC2, _a1 *ec2.DeleteTagsInput) (*ec2.DeleteTagsOutput, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *ec2.DeleteTagsOutput
	if rf, ok := ret.Get(0).(func(*ec2.EC2, *ec2.DeleteTagsInput) *ec2.DeleteTagsOutput); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ec2.DeleteTagsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*ec2.EC2, *ec2.DeleteTagsInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
