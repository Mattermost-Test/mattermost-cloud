// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	acm "github.com/aws/aws-sdk-go/service/acm"
	aws "github.com/mattermost/mattermost-cloud/internal/tools/aws"
	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"
)

// AWS is an autogenerated mock type for the AWS type
type AWS struct {
	mock.Mock
}

// CreateDatabaseSnapshot provides a mock function with given fields: installationID
func (_m *AWS) CreateDatabaseSnapshot(installationID string) error {
	ret := _m.Called(installationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(installationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePrivateCNAME provides a mock function with given fields: dnsName, dnsEndpoints, logger
func (_m *AWS) CreatePrivateCNAME(dnsName string, dnsEndpoints []string, logger logrus.FieldLogger) error {
	ret := _m.Called(dnsName, dnsEndpoints, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, logrus.FieldLogger) error); ok {
		r0 = rf(dnsName, dnsEndpoints, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePublicCNAME provides a mock function with given fields: dnsName, dnsEndpoints, logger
func (_m *AWS) CreatePublicCNAME(dnsName string, dnsEndpoints []string, logger logrus.FieldLogger) error {
	ret := _m.Called(dnsName, dnsEndpoints, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, logrus.FieldLogger) error); ok {
		r0 = rf(dnsName, dnsEndpoints, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePrivateCNAME provides a mock function with given fields: dnsName, logger
func (_m *AWS) DeletePrivateCNAME(dnsName string, logger logrus.FieldLogger) error {
	ret := _m.Called(dnsName, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logrus.FieldLogger) error); ok {
		r0 = rf(dnsName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePublicCNAME provides a mock function with given fields: dnsName, logger
func (_m *AWS) DeletePublicCNAME(dnsName string, logger logrus.FieldLogger) error {
	ret := _m.Called(dnsName, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logrus.FieldLogger) error); ok {
		r0 = rf(dnsName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAndClaimVpcResources provides a mock function with given fields: clusterID, owner, logger
func (_m *AWS) GetAndClaimVpcResources(clusterID string, owner string, logger logrus.FieldLogger) (aws.ClusterResources, error) {
	ret := _m.Called(clusterID, owner, logger)

	var r0 aws.ClusterResources
	if rf, ok := ret.Get(0).(func(string, string, logrus.FieldLogger) aws.ClusterResources); ok {
		r0 = rf(clusterID, owner, logger)
	} else {
		r0 = ret.Get(0).(aws.ClusterResources)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, logrus.FieldLogger) error); ok {
		r1 = rf(clusterID, owner, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificateSummaryByTag provides a mock function with given fields: key, value
func (_m *AWS) GetCertificateSummaryByTag(key string, value string) (*acm.CertificateSummary, error) {
	ret := _m.Called(key, value)

	var r0 *acm.CertificateSummary
	if rf, ok := ret.Get(0).(func(string, string) *acm.CertificateSummary); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.CertificateSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateZoneDomainName provides a mock function with given fields: logger
func (_m *AWS) GetPrivateZoneDomainName(logger logrus.FieldLogger) (string, error) {
	ret := _m.Called(logger)

	var r0 string
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) string); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger) error); ok {
		r1 = rf(logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidAMI provides a mock function with given fields: AMIImage
func (_m *AWS) IsValidAMI(AMIImage string) (bool, error) {
	ret := _m.Called(AMIImage)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(AMIImage)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(AMIImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseVpc provides a mock function with given fields: clusterID, logger
func (_m *AWS) ReleaseVpc(clusterID string, logger logrus.FieldLogger) error {
	ret := _m.Called(clusterID, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, logrus.FieldLogger) error); ok {
		r0 = rf(clusterID, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TagResource provides a mock function with given fields: resourceID, key, value, logger
func (_m *AWS) TagResource(resourceID string, key string, value string, logger logrus.FieldLogger) error {
	ret := _m.Called(resourceID, key, value, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, logrus.FieldLogger) error); ok {
		r0 = rf(resourceID, key, value, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UntagResource provides a mock function with given fields: resourceID, key, value, logger
func (_m *AWS) UntagResource(resourceID string, key string, value string, logger logrus.FieldLogger) error {
	ret := _m.Called(resourceID, key, value, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, logrus.FieldLogger) error); ok {
		r0 = rf(resourceID, key, value, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
