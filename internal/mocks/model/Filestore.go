// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"

	v1alpha1 "github.com/mattermost/mattermost-operator/pkg/apis/mattermost/v1alpha1"
)

// Filestore is an autogenerated mock type for the Filestore type
type Filestore struct {
	mock.Mock
}

// GenerateFilestoreSpecAndSecret provides a mock function with given fields: logger
func (_m *Filestore) GenerateFilestoreSpecAndSecret(logger logrus.FieldLogger) (*v1alpha1.Minio, *v1.Secret, error) {
	ret := _m.Called(logger)

	var r0 *v1alpha1.Minio
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) *v1alpha1.Minio); ok {
		r0 = rf(logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Minio)
		}
	}

	var r1 *v1.Secret
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger) *v1.Secret); ok {
		r1 = rf(logger)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*v1.Secret)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(logrus.FieldLogger) error); ok {
		r2 = rf(logger)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Provision provides a mock function with given fields: logger
func (_m *Filestore) Provision(logger logrus.FieldLogger) error {
	ret := _m.Called(logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) error); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Teardown provides a mock function with given fields: keepData, logger
func (_m *Filestore) Teardown(keepData bool, logger logrus.FieldLogger) error {
	ret := _m.Called(keepData, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool, logrus.FieldLogger) error); ok {
		r0 = rf(keepData, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
