// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	logrus "github.com/sirupsen/logrus"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseMigration is an autogenerated mock type for the DatabaseMigration type
type DatabaseMigration struct {
	mock.Mock
}

// Restore provides a mock function with given fields: logger
func (_m *DatabaseMigration) Restore(logger logrus.FieldLogger) (string, error) {
	ret := _m.Called(logger)

	var r0 string
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) string); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger) error); ok {
		r1 = rf(logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: logger
func (_m *DatabaseMigration) Status(logger logrus.FieldLogger) (string, error) {
	ret := _m.Called(logger)

	var r0 string
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) string); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(logrus.FieldLogger) error); ok {
		r1 = rf(logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Teardown provides a mock function with given fields: logger
func (_m *DatabaseMigration) Teardown(logger logrus.FieldLogger) error {
	ret := _m.Called(logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(logrus.FieldLogger) error); ok {
		r0 = rf(logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
